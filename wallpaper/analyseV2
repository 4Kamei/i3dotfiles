#!/bin/bash

OUTPUT=false
COLOURS="10"
MIN_INTENSITY="40"
MIN_DISTANCE="1000"
OUTPUT_STD=false

while getopts 'of:c:i:d:s' arg; do
	case "${arg}" in
		o) OUTPUT=true ;;
		f) FILE="${OPTARG}" ;;
		c) COLOURS="${OPTARG}" ;;
		i) MIN_INTENSITY="${OPTARG}" ;;
		d) MIN_DISTANCE="${OPTARG}" ;;
		s) OUTPUT_STD=true;;
		*) error "Unexpected option $arg" ;;
	esac	
done
FILE_NAME=$(echo "$FILE" | sed 's/\(\.[^/]*\|[^/]*\/\)//g') 

if [ "$FILE" = "" ]; then
	echo "Error: No input file"
fi

getDistance() {
	R="$(($1 - $2))"
	G="$(($3 - $4))"
	B="$(($5 - $6))"
	echo $((($R * $R) + ($G * $G) + ($B * $B)))
}
getDec() {
	echo $(echo "$((16#$1))")
}
analyse() {
	if [ $OUTPUT_STD = false ]; then echo "Analysing image $1"; fi
	y=0
	CUR_COL_R=0
	CUR_COL_G=0
	CUR_COL_B=0
	CUR_COL_INT=0
	image_size="$(($(identify $1 | cut -d" " -f 3 | sed 's/x/ * /')))"
	cutoff=$(($image_size * 2 / 1000))
	convert "$1" -format %c -depth 4 histogram:info:- | sort -r -t: -n |  while read line; do
		num=$(echo $line | grep -oP ' *\K[0-9]*:' | cut -d":" -f 1)
		if [ $num -lt $cutoff ]; then
			exit;
		fi
		
		line=$(echo $line | grep -oE "#[0-9A-F]{6}")

		R=$(getDec $(expr substr $line 2 2))
		G=$(getDec $(expr substr $line 4 2))
		B=$(getDec $(expr substr $line 6 2))
		INTENSITY=$((($R + $B + $G)/3))
		
		if [ $INTENSITY -lt $MIN_INTENSITY ]; then
			continue
		fi
		
		DISTANCE=$(getDistance $CUR_COL_R $R $CUR_COL_G $G $CUR_COL_B $B)
		if [ "$DISTANCE" -lt "$MIN_DISTANCE" ]; then
			continue;
		fi 
		
		m_cap=$(printf "$R\n$G\n$B" | sort -n | tail -1)	
		m_low=$(printf "$R\n$G\n$B" | sort -r -n | tail -1) 
		c=$(($m_cap - $m_low))
			
		if [ "$c" = "0" ]; then
			h=0;
		else
			case $m_cap in
				$R) h=$(bc -l <<< "scale = 10; a = ($G - $B)/$c; scale = 0; a % 6") ;;
				$G) h=$(bc -l <<< "scale = 10; ($B - $R)/$c + 2") ;;
				$B) h=$(bc -l <<< "scale = 10; ($R - $G)/$c + 4") ;;
			esac
		fi 	
		h=$(bc -l <<< "scale = 0; (($h * 60)/1 + 360) % 360")
		echo "$h $line"
	done | sort -n | while read h line; do
		echo "H=$h; line=$line"

		if [ $OUTPUT = true ]; then
			convert colours.png -fill $line -draw "point $2,$y" colours.png
		else
			if [ $OUTPUT_STD = true ]; then 
				echo "colour$NUM: $line"
			else
				echo "colour $NUM:$line" >> "$FILE_NAME-colours.txt"    
			fi		
		fi	
		CUR_COL_R=$R
		CUR_COL_G=$G
		CUR_COL_B=$B
		y=$(($y + 1))
	done
}

cd "$HOME/.config/i3/wallpaper"

if [ $OUTPUT = true ]; then convert -size "$(ls -1 $FILE | wc -l)x$COLOURS" xc:black -stroke none colours.png; fi

if [ -d "$FILE" ]; then 
	X=0
	ls $FILE | while read line; do
		analyse "$FILE/$line" $X
		X=$(($X+1))
	done
fi

if [ -f "$FILE" ]; then analyse $FILE 0; fi

if [ $OUTPUT = true ]; then convert colours.png -filter point -resize 16000% colours.png; fi
